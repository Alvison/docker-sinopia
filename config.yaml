# path to a directory with all packages
storage: ./storage

# a list of users
users:
  admin:
    # crypto.createHash('sha1').update(pass).digest('hex')
    password: fcc5c13c71a559439df81922c7b5e687314f48be

# a list of other known repositories we can talk to
uplinks:
  npmjs:
    url: https://registry.npmjs.org/

    # amount of time (in milliseconds) to wait for repository to respond
    # before giving up and use the local cached copy
    #timeout: 30000

    # maximum time (in seconds) in which data is considered up to date
    #
    # default is 2 minutes, so server won't request the same data from
    # uplink if a similar request was made less than 2 minutes ago
    #maxage: 120

packages:
  # uncomment this for packages with "local-" prefix to be available 
  # for admin only, it's a recommended way of handling private packages
  #'local-*':
  #  allow_access: admin
  #  allow_publish: admin

  '*':
    # allow all users to read packages ('all' is a keyword)
    # this includes non-authenticated users
    allow_access: all

    # allow 'admin' to publish packages
    allow_publish: admin

    # if package is not available locally, proxy requests to 'npmjs' registry
    proxy: npmjs

#####################################################################
# Advanced settings
#####################################################################

# if you use nginx with custom path, use this to override links
#url_prefix: https://dev.company.local/sinopia/

# you can specify listen address (or simply a port)
listen: 0.0.0.0:4873

# type: file | stdout | stderr
# level: trace | debug | info | http (default) | warn | error | fatal
#
# parameters for file: name is filename
#  {type: 'file', path: 'sinopia.log', level: 'debug'},
#
# parameters for stdout and stderr: format: json | pretty
#  {type: 'stdout', format: 'pretty', level: 'debug'},
logs:
  - {type: stdout, format: pretty, level: http}
  #- {type: file, path: sinopia.log, level: info}

# you can specify proxy used with all requests in wget-like manner here
# (or set up ENV variables with the same name)
#http_proxy: http://something.local/
#https_proxy: https://something.local/
#no_proxy: localhost,127.0.0.1

